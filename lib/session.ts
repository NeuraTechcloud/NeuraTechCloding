import { type NextRequest, NextResponse } from "next/server"
import { verify } from "jsonwebtoken"

// A mesma chave secreta usada no login
const JWT_SECRET = process.env.JWT_SECRET || "sua-chave-secreta-super-segura-em-producao"

interface TokenPayload {
  userId: number
  userType: string
  email: string
}

type ApiHandler = (request: NextRequest, context: { params: any }) => Promise<NextResponse>

/**
 * Middleware para proteger rotas da API que exigem permissÃ£o de administrador.
 * Ele verifica um token JWT enviado via cookies.
 * @param handler O handler da rota da API a ser protegido.
 * @returns Um novo handler que primeiro verifica a autenticaÃ§Ã£o e autorizaÃ§Ã£o.
 */
export function withAdminAuth(handler: ApiHandler): ApiHandler {
  return async (request: NextRequest, context: { params: any }) => {
    const tokenCookie = request.cookies.get("token")

    if (!tokenCookie) {
      console.warn("ğŸš« Acesso negado: Cookie de autenticaÃ§Ã£o nÃ£o encontrado.")
      return NextResponse.json({ error: "Acesso nÃ£o autorizado." }, { status: 401 })
    }

    const token = tokenCookie.value

    try {
      const decoded = verify(token, JWT_SECRET) as TokenPayload

      if (decoded.userType !== "admin") {
        console.warn(`ğŸš« Tentativa de acesso de admin negada: UsuÃ¡rio '${decoded.email}' nÃ£o Ã© admin.`)
        return NextResponse.json({ error: "Acesso proibido. PermissÃµes insuficientes." }, { status: 403 })
      }

      console.log(`âœ… Acesso de admin autorizado para: ${decoded.email}`)
      return handler(request, context)
    } catch (error) {
      console.error("ğŸš« Erro de autenticaÃ§Ã£o: Token invÃ¡lido ou expirado.", error)
      return NextResponse.json({ error: "Token invÃ¡lido ou expirado." }, { status: 401 })
    }
  }
}
