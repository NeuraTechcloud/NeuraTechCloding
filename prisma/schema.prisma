// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  userType  UserType @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  vehicles Vehicle[]
  alerts   Alert[]

  @@map("users")
}

model Vehicle {
  id          String        @id @default(cuid())
  name        String
  plate       String        @unique
  imei        String        @unique
  status      VehicleStatus @default(OFFLINE)
  speed       Float         @default(0)
  lat         Float?
  lng         Float?
  address     String?
  lastUpdate  DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relacionamentos
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  locations  Location[]
  alerts     Alert[]
  geofences  Geofence[]

  @@map("vehicles")
}

model Location {
  id        String   @id @default(cuid())
  lat       Float
  lng       Float
  speed     Float    @default(0)
  address   String?
  timestamp DateTime @default(now())

  // Relacionamentos
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("locations")
}

model Geofence {
  id          String      @id @default(cuid())
  name        String
  type        GeofenceType @default(CIRCLE)
  centerLat   Float
  centerLng   Float
  radius      Float?      // Para círculos
  polygon     Json?       // Para polígonos
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  alerts    Alert[]

  @@map("geofences")
}

model Alert {
  id          String    @id @default(cuid())
  type        AlertType
  message     String
  isRead      Boolean   @default(false)
  triggeredAt DateTime  @default(now())

  // Relacionamentos
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleId   String
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  geofenceId  String?
  geofence    Geofence? @relation(fields: [geofenceId], references: [id], onDelete: SetNull)

  @@map("alerts")
}

enum UserType {
  GUEST
  CLIENT
  ADMIN
}

enum VehicleStatus {
  ONLINE
  STOPPED
  OFFLINE
}

enum GeofenceType {
  CIRCLE
  POLYGON
}

enum AlertType {
  IGNITION_ON
  IGNITION_OFF
  SPEED_LIMIT
  GEOFENCE_ENTER
  GEOFENCE_EXIT
  PANIC_BUTTON
  LOW_BATTERY
  OFFLINE
}
